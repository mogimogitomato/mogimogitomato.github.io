[{"categories":["Music","Programming"],"content":" 動機 ブティック系エフェクターが好きで、ギズモ屋さんやknobs等で個性的で美しい音色のエフェクトペダルが紹介されるたびに胸躍らせてしまうのですが、1つ1つがそれなりのお値段なので物欲のままにあれこれ買い揃えるのは厳しい(というか1個買うのも結構ハードルが..)でもそれっぽい音は鳴らしたい！！という気持ちがありました。\n一方、Sonic Piのv3.1.0から live_audio という関数が導入され、オーディオインターフェースからの入力をSonic Pi上でシンセとして扱うことができる様になりました。これでSonic Pi上からエフェクトをかけられる！！\nまた、ORCΛというElectron製でMIDIやOSCなどの信号をSonic Piなど外部に簡単に飛ばせるツールがあることを最近知りました。これで任意のタイミングでランダムに信号を飛ばせる！！\nブティック系エフェクターの中で個人的に特に好きなのが、エフェクトに対するパラメータのランダマイズ機構を持っているものだったりします(本記事タイトルの変態に相当)。\nORCΛとSonic Piを使ってパラメータをランダマイズした空間系エフェクトをかけつつ、好みの音像を作れるか試行した際の手順をまとめたのが本記事です。\n環境  Mac OS X Mojave 10.14.6 Sonic Pi 3.1.0 ORCΛ 0.1.0 エレキギター(任意. 検証時はフェンダージャパンのテレキャスターを使用) オーディオインターフェース(任意. 検証時はFOCUSRITEのScarlett 2i2 G2を使用)\n  ※ORCΛの詳しい説明やORCΛとSonic Piのインストール/連携手順等については、以下の記事でまとめて下さっている方がいたのであらかじめご参照下さい。本記事での同様の記載は割愛します。\nライブコーディングツール「ORCΛ」と「SonicPi」の連携（備忘録、初心者向け）\nオーディオインターフェースを接続後、 システム環境設定→サウンド から入力を接続したオーディオインターフェースに指定すれば準備はOKです。\nORCΛ エフェクトのパラメータをランダマイズするにあたって、ORCΛから任意のランダムな信号を送り\nSonic Pi側で信号を受けてエフェクトのパラメータにセットする構成としました。\nORCΛ側で以下の様に信号を飛ばします。\n   ORCΛでは大文字の英単語と特定の記号がそれぞれコマンドになっています。\n* はbangと呼ばれる信号の発火を行うコマンドで、 = で繋いだ値を送付します。\n上記では、 D(delay) コマンド(左右の引数を元にbangを行うタイミングを制御する)と\nR(random) コマンド(左右の引数の範囲内の値をランダムに下部に出力する)を使用し\nvと命名した配列にランダム値を格納した状態で1frame毎に信号を飛ばしています。\nSonic Pi Sonic Piを立ち上げた状態で、右側Cueの部分にORCΛから送られた信号が確認できます。\n以下でSonic Pi側で送られた信号をエフェクトのパラメータに指定し、オーディオインターフェースからの入力に\nエフェクトをかけます。\nrequire \u0026amp;#39;bigdecimal\u0026amp;#39; use_bpm 120 live_loop :bizzare_effect do use_real_time v = sync \u0026amp;#34;/osc/v\u0026amp;#34; delayTime = v[0] * 0.10 sampleLength = v[0] * 0.10 reverbDepth = v[2] * 0.50 delayTime = BigDecimal(delayTime.to_s).floor(2).to_f sampleLength = BigDecimal(sampleLength.to_s).floor(2).to_f puts \u0026amp;#34;delayTime: #{delayTime}\u0026amp;#34; puts \u0026amp;#34;sampleLength: #{sampleLength}\u0026amp;#34; puts \u0026amp;#34;reverbDepth: #{reverbDepth}\u0026amp;#34; # delay with_fx :echo, amp: 1.0, decay: 5, phase: delayTime do # reverb with_fx :reverb, amp: 1.0, room: reverbDepth do # reverse用に録音 with_fx :record, buffer: buffer[:buff, 8] do live_audio :guitar, input: 1 end end sleep …","date":1567967126,"objectID":"e40915353414fb9e192156d6e21e2fa5","permalink":"https://mogimogitomato.github.io/post/20190909/","tags":["Sonic Pi","ORCΛ"],"title":"ORCΛとSonic Piで変態エフェクターを作ろう"},{"categories":["Programming"],"content":"jhatコマンドを叩いたところ、そんなもの無いと言われた\n$ jhat Unable to locate an executable at \u0026amp;quot;/Library/Java/JavaVirtualMachines/openjdk-12.0.1.jdk/Contents/Home/bin/jhat\u0026amp;quot; (-1)  無い..\n$ ls -l \u0026amp;quot;/Library/Java/JavaVirtualMachines/openjdk-12.0.1.jdk/Contents/Home/bin\u0026amp;quot; .rwxr-xr-x@ 22k user 2 4 17:23 jaotc .rwxr-xr-x@ 18k user 2 4 17:23 jar .rwxr-xr-x@ 18k user 2 4 17:23 jarsigner .rwxr-xr-x@ 18k user 2 4 17:23 java .rwxr-xr-x@ 18k user 2 4 17:23 javac .rwxr-xr-x@ 18k user 2 4 17:23 javadoc .rwxr-xr-x@ 18k user 2 4 17:23 javap .rwxr-xr-x@ 18k user 2 4 17:23 jcmd .rwxr-xr-x@ 18k user 2 4 17:23 jconsole .rwxr-xr-x@ 18k user 2 4 17:23 jdb .rwxr-xr-x@ 18k user 2 4 17:23 jdeprscan .rwxr-xr-x@ 18k user 2 4 17:23 jdeps .rwxr-xr-x@ 18k user 2 4 17:23 jfr .rwxr-xr-x@ 18k user 2 4 17:23 jhsdb .rwxr-xr-x@ 18k user 2 4 17:23 jimage .rwxr-xr-x@ 18k user 2 4 17:23 jinfo .rwxr-xr-x@ 18k user 2 4 17:23 jjs .rwxr-xr-x@ 18k user 2 4 17:23 jlink .rwxr-xr-x@ 18k user 2 4 17:23 jmap .rwxr-xr-x@ 18k user 2 4 17:23 jmod .rwxr-xr-x@ 18k user 2 4 17:23 jps .rwxr-xr-x@ 18k user 2 4 17:23 jrunscript .rwxr-xr-x@ 18k user 2 4 17:23 jshell .rwxr-xr-x@ 18k user 2 4 17:23 jstack .rwxr-xr-x@ 18k user 2 4 17:23 jstat .rwxr-xr-x@ 18k user 2 4 17:23 jstatd .rwxr-xr-x@ 18k user 2 4 17:23 keytool .rwxr-xr-x@ 18k user 2 4 17:23 pack200 .rwxr-xr-x@ 18k user 2 4 17:23 rmic .rwxr-xr-x@ 18k user 2 4 17:23 rmid .rwxr-xr-x@ 18k user 2 4 17:23 rmiregistry .rwxr-xr-x@ 18k user 2 4 17:23 serialver .rwxr-xr-x@ 103k user 2 4 17:23 unpack200  どうやら以下で変更が入って、Java SE 9以降は削除されてるっぽい.\nhttps://bugs.openjdk.java.net/browse/JDK-8059039\nこれからはMATを使うのがよさそうです.\nhttp://www.eclipse.org/mat/\n","date":1562722188,"objectID":"951f514923082a2ff1be5357b24523b4","permalink":"https://mogimogitomato.github.io/post/20190710/","tags":["Java"],"title":"さよならjhat"},{"categories":["Programming"],"content":"PHPでの開発中に製造工程の追加行数、削除行数を一覧化する必要が出たので、\n以下の要領でファイル単位での各行数とその合計数を出力しました。\n#!/bin/bash  ## ライブラリやFW、テストコードは除外し、phpファイルの一覧をフルパスで取得 file_list=`find . -type d \\( -name \u0026amp;#39;vendor\u0026amp;#39; -o -name \u0026amp;#39;tests\u0026amp;#39; -o -name \u0026amp;#39;system\u0026amp;#39; \\) \\  -prune -o -type f -name \u0026amp;#39;*.php\u0026amp;#39;` ## phpファイル単位でgit logを出力 for file in $file_list; do result=`git log --numstat --pretty=\u0026amp;#34;%H\u0026amp;#34; --no-merges $file | \\  awk \u0026amp;#39;NF==3 {plus+=$1; minus+=$2} \\ END {printf(\u0026amp;#34;%d (+%d, -%d)\\n\u0026amp;#34;, plus+minus, plus, minus)}\u0026amp;#39;` echo $file\u0026amp;#39; :\u0026amp;#39;$result done けれど、途中コードフォーマットの修正を何回か行っており、それらのコミットについては\nカウント対象から除外したかったので思案。\ngitの公式リファレンスを見ると、git logのオプションで--invert-grepというのが指定できる様。\nhttps://git-scm.com/docs/git-log#Documentation/git-log.txt---invert-grep\n--grep=\u0026amp;lt;pattern\u0026amp;gt;オプションで指定したパターンにlogメッセージが一致しないコミットに出力を制限する、との事。\nコミット時のメッセージに対応タスクのIDを含むルールとしていたので、以下で取り直し無事特定コミットを\n行数カウントから除外する事ができました。\n#!/bin/bash  ## ライブラリやFW、テストコードは除外し、phpファイルの一覧をフルパスで取得 file_list=`find . -type d \\( -name \u0026amp;#39;vendor\u0026amp;#39; -o -name \u0026amp;#39;tests\u0026amp;#39; -o -name \u0026amp;#39;system\u0026amp;#39; \\) \\  -prune -o -type f -name \u0026amp;#39;*.php\u0026amp;#39;` ## phpファイル単位でgit logを出力 for file in $file_list; do result=`git log --invert-grep --grep=\u0026amp;#34;タスクID\u0026amp;#34; \\  --numstat --pretty=\u0026amp;#34;%H\u0026amp;#34; --no-merges $file | \\  awk \u0026amp;#39;NF==3 {plus+=$1; minus+=$2} \\ END {printf(\u0026amp;#34;%d (+%d, -%d)\\n\u0026amp;#34;, plus+minus, plus, minus)}\u0026amp;#39;` echo $file\u0026amp;#39; :\u0026amp;#39;$result done","date":1558707093,"objectID":"83f12565c49391fb53c2034375924cac","permalink":"https://mogimogitomato.github.io/post/20190524/","tags":["git"],"title":"git logから特定コミットの出力を抑止する"},{"categories":["Programming"],"content":"地味な内容だけれど今まで知らず、よく使いそうなのでメモ。\n 目的\n開いているフォルダ内のファイルA, ファイルBを比較したい\n 手順\nVSCodeの左ペインからファイルAを選択し右クリック\n→[比較対象の選択]をクリック\nファイルBを選択し右クリック\n→[選択項目と比較]をクリック\n  →コード編集エリアに選択したファイルの比較結果が表示される。\n","date":1557327792,"objectID":"46f82361af3ac72eafb37a366d508629","permalink":"https://mogimogitomato.github.io/post/20190509/","tags":["VSCode"],"title":"VSCodeでdiffを取る"},{"categories":["Music","Programming"],"content":" Hey Joe    !?!?!?!?!?!?!?\nDC/PRGのHey Joe打ち込んでみましたァ〜〜〜\n!?!?!?!?!?!?!?!?!?!?!?!?!?!?\nやってみましょう。\nやる Sonic Piで以下を実行します。\n##| _ _ _ ##| | | | | ___ _ _ | | ___ ___ ##| | |_| |/ _ \\ | | | _ | |/ _ \\ / _ \\ ##| | _ | __/ |_| | | |_| | (_) | __/ ##| |_| |_|\\___|\\__, | \\___/ \\___/ \\___| ##| |___/ use_bpm 105 # 17/16の1拍分の音価 BASELINE_NOTE = 4.25 / 17 # 4/4の1拍分の音価 LEADLINE_NOTE = 4.25 / 16 # 4/4の1/2拍分の音価 HALF_LEADLINE_NOTE = 4.25 / 16 / 2 define :baseSleep do |note| note = note += 1 rest = BASELINE_NOTE * note sleep rest end define :leadSleep do |note| note = note += 1 rest = LEADLINE_NOTE * note sleep rest end # ベースライン live_loop :baseLine do use_synth :saw 4.times do # 5 * 3 + 2 = 17 5.times do play 62, amp: 1.0 baseSleep(0) play 64, amp: 1.0 baseSleep(1) end play 62, amp: 1.0 baseSleep(0) play 59, amp: 1.0 baseSleep(0) end end # 主旋律 live_loop :leadLine do use_synth :dsaw sleep 4.25 * 4 # 4 * 4 4.times do |cycle| leadFirstMeasure() leadSecondMeasure() leadThirdMeasure() leadFourthMeasure(cycle) end end # 主旋律 1小節目 define :leadFirstMeasure do play 71, amp: 1.0 leadSleep(1) play 69, amp: 1.0 leadSleep(0) play 67, amp: 1.0 leadSleep(0) 2.times do play 69, amp: 1.0 leadSleep(0) play 67, amp: 1.0 leadSleep(0) play 64, amp: 1.0 leadSleep(0) end play 67, amp: 1.0 leadSleep(1) play 64, amp: 1.0 leadSleep(1) end # 主旋律 2小節目 define :leadSecondMeasure do play 62, amp: 1.0 leadSleep(0) play 64, amp: 1.0 leadSleep(0) play 67, amp: 1.0 leadSleep(0) play 69, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(0) play 74, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(0) play 69, amp: 1.0 leadSleep(0) play 64, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(0) play 69, amp: 1.0 leadSleep(1) play 67, amp: 1.0 leadSleep(0) play 69, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(1) end # 主旋律 3小節目 define :leadThirdMeasure do play 67, amp: 1.0 leadSleep(0) play 69, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(0) play 76, amp: 1.0 leadSleep(0) play 71, amp: 1.0 leadSleep(1) play 71, amp: 1.0 …","date":1551802896,"objectID":"a95285fd96e0290087e0fe0ac9ec1fa1","permalink":"https://mogimogitomato.github.io/post/20190306/","tags":["Sonic Pi"],"title":"コードで感じるHey Joe"},{"categories":["Programming"],"content":"  本日のBGM\n   以下本題です。\n動機 中古の商品を探す際、メル◯リの様に指定の検索条件に対して入荷があった場合に通知を受け取れると\n便利ですが、愛する駿河屋では商品単位でしか通知を受け取ることができず、駿河屋の登録履歴にない\n新規入荷した商品の有無は都度検索してチェックする必要がありました。\n先日puppeteer(Chromiumのヘッドレスブラウザを実行するためのnodeライブラリ)を知り、\n検索行為を自動化して商品情報を取得できるか試してみました。\n※puppeteerの概要やセットアップ手順などの詳細はリンクの公式サイトを参照下さい。\n結果 結論だけ、書く。\n以下のスクリプトを作成しました。\nconst puppeteer = require(\u0026amp;#39;puppeteer\u0026amp;#39;); const TARGET_URL = \u0026amp;#39;https://www.suruga-ya.jp/\u0026amp;#39;; const SEARCH_WORDS = process.argv[2]; async function getScrapingData(search_word) { const browser = await puppeteer.launch({headless:true}) const page = await browser.newPage() await page.goto(TARGET_URL, {waitUntil: \u0026amp;#39;networkidle2\u0026amp;#39;}) await page.type(\u0026amp;#39;input[name=search_word]\u0026amp;#39;, search_word) const searchElement = await page.$(\u0026amp;#39;input[id=btn]\u0026amp;#39;) await Promise.all([ page.waitForNavigation({waitUntil: \u0026amp;#34;domcontentloaded\u0026amp;#34;}), searchElement.click() ]) const scrapingData = await page.evaluate(() =\u0026amp;gt; { const dataList = [] const itemList = Array.from(document.querySelectorAll(\u0026amp;#34;div.item\u0026amp;#34;)) for (let i = 0; i \u0026amp;lt; itemList.length; i++) { let item = itemList[i].children[1].children[1].children[0] // 商品価格はタイムセールなどで子要素が可変になるため判定  let priceList = itemList[i].children[2] let price = null for (let j = 0; j \u0026amp;lt; priceList.children.length; j++) { if (priceList.children[j].className == \u0026amp;#34;price\u0026amp;#34;) { price = priceList.children[j] break } } let data = { url: item.href, title: item.textContent, price: price.textContent }　dataList.push(data) } return dataList }) const result = [] result.push({[search_word]: scrapingData}) const json = JSON.stringify(result, null, \u0026amp;#34; \u0026amp;#34;) await browser.close() console.log(json) } getScrapingData(SEARCH_WORDS)  実行してみる\n~/Desktop/puppeteer via ⬢ v10.7.0 ➜ node surugaya_search.js marisada  取れた！！\n~/Desktop/puppeteer via ⬢ v10.7.0 took 2s ➜ node surugaya_search.js marisada [ { \u0026amp;quot;marisada\u0026amp;quot;: [ { \u0026amp;quot;url\u0026amp;quot;: \u0026amp;quot;https://www.suruga-ya.jp/product/detail/186129095001\u0026amp;quot;, \u0026amp;quot;title\u0026amp;quot;: …","date":1550075956,"objectID":"a038ee5bcdd5c282edf3e148c39931d3","permalink":"https://mogimogitomato.github.io/post/20190214/","tags":["puppeteer"],"title":"puppeteerで駿河屋の商品情報を取得する"},{"categories":["Music","Programming"],"content":"飲み会の終わりに行われる日本の奇習、三本締め。\n由来も何も分からず周りに合わせて手拍子を打ちながら、こう思った事はないだろうか。\n「あぁ.. Clapping Musicがやりたい\u0026amp;hellip;」\n  余裕っすよ！やってやりましょうよ！！！\nSonic Piで以下を実行します。\nclap_arrayは三本締めのパターンの配列で、\nperc_snapは要素を先頭から順に繰り返し=通常の三本締めパターンを打ち、\nperc_snap2は8周するごとに次の要素を先頭にします。\nこの動作を配列の要素数 + 1回繰り返し、最後は慣例に倣って\n拍手で終了します。\nuse_bpm 400 load_sample :perc_snap load_sample :perc_snap2 clap_array = [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0] length = clap_array.length (length + 1).times do |cycle| 8.times do |reps| length.times do |beat| sample :perc_snap, pan: -0.5 if clap_array[beat] == 1 sample :perc_snap2, pan: 0.5 if clap_array[(cycle + beat) % length]  == 1 puts \u0026amp;#34;Cycle: #{cycle + 1}Reps: #{reps + 1}Beat: #{beat + 1}\u0026amp;#34; sleep 1 end end end sleep 1 for num in 1..50 do sample :perc_snap sleep rand(0..0.4) sample :perc_snap2 sleep rand(0..0.4) end SoundCloudに実行結果を上げました。\n 今から練習して新学期に差をつけよう！！！\n","date":1548197468,"objectID":"0eb35ecc22e67eae3c1ba44bffd1055a","permalink":"https://mogimogitomato.github.io/post/20190123/","tags":["Sonic Pi"],"title":"Clapping Music 三本締め編"},{"categories":["Music"],"content":" 20代の前半はフリージャズか一部のアニソンを集中的に聴き漁って生きていたんですが、\n20代の後半を迎えた今は女性のギター弾き語り曲をたくさん聴いています。\n猫2匹と暮らし始めたことが自分の中では大きくて、\n人には丸くなったと言われつつ穏やかな心持ちになりました。人間はこの様にして変わっていきます。\nそんなわけで、普段聴いている曲の紹介記事を書きました。\nIndex  Joen Baez Rachael Dadd mmm 滝沢朋恵 小嶋佐和子 kyooo 柴田聡子 イ・ラン 柴田聡子とイ・ラン  Joen Baez    工藤冬里のドキュメンタリーの中で演奏されているのを見て知りました。\n調べてみるとフォーク史でめちゃくちゃ有名な人なんですね..\n上の動画(House Carpenter)では染み入る様な声で、愛情と時間の残酷さについて歌っています。\nRachael Dadd    イギリス、ウィンチェスター出身のSSWで、日本にもちょくちょく来られているみたいです。\nPVもそうですが曲もユーモラスで、日常の暮らしに違った視点を持たせてくれます。\nPVの中で壁に掛かっているコラージュはアルバム「Bite the mountain」のジャケットにもなってます。\nmmm    Safe Modeというアルバムが出た時に色んな人が話題にしていて、ジャケットのイメージから電子音楽系の人なのかな？と思ってました。\nアーティスト名の「mmm」(ミーマイモーと読むらしい)も、Android OSをビルドする際の同名コマンドがあるのでそれ由来かな？と思っていたり(今考えると絶対違うと思いますが..)\nその後Safe Modeのレコードを買って聴いたり、ライブに出掛けたりしてすっかりはまってしまいました。\n人懐っこいメロディは元より英語詞も日本語詞もしなやかで、翳りのある詞であっても常にどこか暖かみがあって。\n文科系の佇まいと裏腹にパワフルなお人です。新譜のコブラも気になる。\n滝沢朋恵    最近HEADZから新譜が出てそっちも最高の様です、 自分は上の動画で初めて知って持っていかれました。\n弾き語り専門の方なのかな..？と思っているとそうでもなくて、 ノイズもされるのか..と衝撃を受けたり。\n繊細な詩世界が一貫していて、肩の力が抜けていきます。\n小嶋佐和子    休日の朝にコーヒーを飲みながら猫を膝に載せている時に聴くのが一番好きです。\nこの曲自体は久米貴というヤバい人が作曲、ひろたえみという方が作詞されている様。\nアルバム「貝のふた」に収録されており、他にもスウィング調やバラードの柔らかい楽曲が多数入っていて\n聴くとぐっすり眠れシャキッと起きられます。\nkyooo    自分があれやこれや書くより、雪舟えまさんのレビューが全てを語っているのでそちらを見てくれ..\n楽曲のバランス感覚や清潔さが傑出していると思います。\n最近の発表作もとても素晴らしくて、音源化が楽しみです。\n柴田聡子    桜木町で働いていた頃に退勤後自転車に乗って、自宅までの巨大な坂を登りながらこの曲を聴いた時に\n嬉しい様な切ない様なよく分からない感情に襲われ、坂を走り降りてまた最初から登り始めるのを繰り返しました。(は..?)\nすごい有名だと思いますがすごい好きです。以前どこかの記事でレコメンされてた「味でもなんでも浜一番」の中華料理・一番もすごい美味しいです。語彙力。\n柴田聡子 in FIRE(バンド編成)も見てみたい。\nイ・ラン     神様ごっこ\n韓国で生まれ暮らすことにどんな意味があるとお考えですか\n時には砂漠に放り出されたような気分になりますか\n良い物語があっても創られないということ\n良い物語への信念が崩れる時もやってくるものですか\nこの頃も恐ろしい出来事と向かい合っているのですか\n中年になっても絶望と挫折の重さは同じですか\nそれでも偶然出会ったような物語が生まれるのを待ち\n今日も彼らの隣の席で食事をしているのですか\n聖杯を探そうとする人と復讐をしようとする人\n結局みんな家を出発することで始まる　そんな物語\n単純な英雄は人々の代わりに生贄となり死を迎え\n人々は彼のために涙をこぼして家に帰ります\n相変わらず人々は良い物語が現れるのを待っています\n良い物語は香りをまとい　人々はその匂いを嗅ぎます\n全ての物語は生贄として創られる悲劇\n喜劇は生贄が流す血を受けるための淵の広いお皿\nひょっとして私は映画を作ることで神様ごっこをしようとしているのかもしれない\n相変わらず人々は良い物語が現れるのを待っている\n私は良い物語を通じて神様ごっこをしようとしているのかもしれない\n I saizeriya Uを友人たちとサイゼリヤで聴いてどんな方かも知らないまま大盛り上がりしていたら、物 …","date":1547974705,"objectID":"4963b56bbd831418b4db71a608dffa77","permalink":"https://mogimogitomato.github.io/post/20190120/","tags":["Review"],"title":"私的フィメールフォーク選"},{"categories":["Programming"],"content":"Twitter経由で面白いサイトを知りました。\nJulia Evans(@b0rk)さんがまとめている Wizard zines というサイトで、\n開発現場における知っ得情報がpdfにまとめられています。\n(カラー表紙は有償、モノクロ表紙は無償)\n有償版の方はまだ読めてないですが、システムの状態解析手法(perfマジヤバい)や\nネットワークについて、初学者への心得など幅広く取り上げられていてどれもためになります。\nZINEの体裁を取っているのが特徴で、開発関係の記事というと多くは\n文章 + コード + ターミナルなど実際の画面 で完結するものが多いと思うんですが\nこちらのZINEでは棒人間(！)や手書きの文章で丁寧な解説がされています。\nテーマごとに表紙があって手書き解説があって..という小冊子の技術本は\n気持ちも盛り上がるしとっつきやすく、読んでいて理解も早まる感がありました。\n技術書典が大盛況な昨今、Web上のZINE頒布も増えていくのかな、と思ったり。\n","date":1547448120,"objectID":"e169ba86454e98557dc4d821d4ec1aeb","permalink":"https://mogimogitomato.github.io/post/20190114/","tags":["技術書"],"title":"Wizard zinesが面白い"},{"categories":["Music"],"content":"  ※Original transcription by Eric Schmidt   ","date":1546612434,"objectID":"4f264699682795d7cd5ac090e68c9c91","permalink":"https://mogimogitomato.github.io/post/20190104_02/","tags":["JohnZorn","LeadSheet"],"title":"Metaltov"},{"categories":["Programming"],"content":" あらすじ 「Hugoで生成したサイトを公開したぞ〜！よぉし次はGoogle Analytics設定しよう！！」と思った\n↓\nrootディレクトリのconfig.tomlにある「googleAnalytics = \u0026amp;ldquo;\u0026amp;ldquo;」にトラッキングIDを設定すればおk！というのを見てやってみる\n↓\n確かにhtmlにトラッキングコードが追加されてる凄い！！ウッでも方式がanalytics.jsだ..！！\n(せっかくなら最新のgtag.jsを設定したい)\n↓\nそもどの様にトラッキングコードが追加されるかを確認しつつ、gtag.jsで設定する→本記事の趣旨\nオチを先に ウッでも方式がanalytics.jsだ..！！\nHugoで提供しているテンプレートがanalytics.jsだから、というのが根本的な理由でした。\nこの件は既にIssuesでやり取りされていて(Update the internal GA template #4479)、\nHugoのv0.56のマイルストーンでテンプレートをgtag.jsに変更するissueが含まれているので今後変更されそうです。 (Update Google Analytics internal template to new style(gtag.js) #4327)\n本記事では自前で内部テンプレートを作成する手法を記載していますが、\n今後変更に併せ公式のテンプレートを使用した方が良さそうです。\nどの様にトラッキングコードが追加されるか Hugoの公式リファレンスでは、大まかに「設定ファイルにトラッキングIDを指定した後_internal/配下のテンプレートを含められるよ！」と記載があり、これを各themeが実装している様でした。\n前述の様にテンプレートがanalytics.jsのため、themeフォルダ内に自前でgtag.js版のhtmlを用意しそちらを読み込ませる様にします。\ngtag.jsで設定する forkしたthemeに対し以下の変更を加えました。(変更内容はthemeによって異なると思いますが、参考になれば..)\nhttps://github.com/mogimogitomato/kiss/commit/88158ed079f8ddb6062fa5a8868321558cdcfab5\n変更に当たっては、以下の記事を参考にしました。\nGoogle アナリティクス用のトラッキングコードを埋め込む\n最後に gtag.jsのトラッキングコードはheadタグの直下に配置する必要があり、Hugoのテンプレートが変更されたら\nthemeも対応する必要があるところが多そうです。\n軽微ではありますが、Hugoのアップデートに伴って更新しつつプルリク出せるといいな..\n","date":1546594361,"objectID":"93240f75c3be08806157fd90b20dc1e9","permalink":"https://mogimogitomato.github.io/post/20190104/","tags":["Hugo"],"title":"Hugoで生成したサイトにGoogle Analyticsのトラッキングをgtag.jsで設定する"},{"categories":["Programming"],"content":" 経緯 アウトプットちゃんとしたいが、プログラミングネタなら\nQiitaに書けばいいと思うしそれ以外ならはてなブログがある。\nけれどどちらも更新できていない..\nという情けない逡巡があり、、気ままに好きなことを投稿できる\n個人ブログ形式でまずは始めよう！と考えて始めました。\n方式 Hugoで作成してます。\nthemeはシンプルさに惹かれてこちらを選択しました。\n※小ネタですが、ソーシャルリンク(右上のアイコン)にSoundcloudを追加したかったため\nデフォルトの構成に以下を追記しています。\n rootディレクトリ直下のconfig.toml\n  [params.social] soundcloud = \u0026amp;#34;アカウント名\u0026amp;#34; [params.social.config] platforms = [\u0026amp;#34;soundcloud\u0026amp;#34;]  themes/kiss配下のdata/theme.toml\n  soundcloud = \u0026amp;#39;https://soundcloud.com/\u0026amp;#39;  themes/kiss配下の/layouts/partials/svg/icons.html  {{ else if eq \u0026amp;#34;soundcloud\u0026amp;#34; . }} \u0026amp;lt;path d=\u0026amp;#34;M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;polyline points=\u0026amp;#34;9 17 9 5 21 3 21 15\u0026amp;#34;/\u0026amp;gt; kissはアイコンにFeatherIconsを採用していて、種類が豊富なので他の追加も出来そうです。\n全体的に、初見でも思い立ってから公開までスピーディーに進めることができました。\n今後 当面以下をコンテンツに据えようと思っています。\n プログラミング関係の知見や小ネタや学習の成果\n 趣味の音楽関係の記事(レビュー、アナライズ、Sonic Pi etc)\n 日常の何か(大体飼い猫たちとの暮らしについてになるはず..)\n  最後に あけましておめでとうございます！\n","date":1546327916,"objectID":"d3babd71cdca4dfc70be80ee635d128a","permalink":"https://mogimogitomato.github.io/post/20190101/","tags":["Hugo"],"title":"Hugoでブログ開設"}]